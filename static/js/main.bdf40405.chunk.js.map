{"version":3,"sources":["components/Animation.js","components/Color.js","components/algorithms/quickSort.js","components/algorithms/mergeSort.js","components/algorithms/selectionSort.js","components/sortVisualizer.js","components/algorithms/insertionSort.js","components/algorithms/bubbleSort.js","App.js","index.js"],"names":["Animation","array","colors","Color","type","indices","quickSort","arr","animations","quickSortRec","length","left","right","index","pivotIndex","Math","floor","pivot","i","j","push","slice","swap","partition","leftIndex","rightIndex","temp","mergeSort","mergeSortRec","mid","parseInt","n1","n2","L","Array","R","ii","jj","k","range","merge","start","end","fill","map","_","idx","ARRAY_RANGE","REG_COLOR","METHODS","value","label","SortVisualizer","React","useState","animationSpeed","setAnimationSpeed","arraySize","setArraySize","numberArray","setNumberArray","method","setMethod","timeouts","resetArray","createRandomInt","updateArray","console","log","useEffect","random","getBarHeight","handleSortClick","document","getElementById","animate","key","len","insertionSort","swapped","tmp","bubbleSort","min_idx","selectionSort","bars","getElementsByClassName","animationStep","animation","complete","setTimeout","reColorBars","color","style","backgroundColor","getColor","colorBars","SortOptions","id","name","className","onChange","e","target","m","selected","height","width","createArrayBar","onClick","min","max","defaultValue","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bdf40405.chunk.js","sourcesContent":["export function Animation(array, colors) {\r\n  return { array: array, colors: colors };\r\n}\r\n","export function Color(type, indices) {\r\n  return { type: type, indices: indices };\r\n}\r\n","import { Animation } from '../Animation';\r\nimport { Color } from '../Color';\r\n\r\nexport function quickSort(arr) {\r\n  let animations = [];\r\n\r\n  quickSortRec(arr, 0, arr.length - 1, animations);\r\n\r\n  return animations;\r\n}\r\n\r\n//recursive function\r\nfunction quickSortRec(arr, left, right, animations) {\r\n  var index;\r\n\r\n  if (arr.length > 1) {\r\n    index = partition(arr, left, right, animations);\r\n    if (left < index - 1) {\r\n      quickSortRec(arr, left, index - 1, animations);\r\n    }\r\n    if (index < right) {\r\n      quickSortRec(arr, index, right, animations);\r\n    }\r\n  }\r\n}\r\n\r\n//swap elements\r\nfunction swap(arr, leftIndex, rightIndex) {\r\n  var temp = arr[leftIndex];\r\n  arr[leftIndex] = arr[rightIndex];\r\n  arr[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n  //partition index is middle of array\r\n  var pivotIndex = Math.floor((right + left) / 2),\r\n    pivot = arr[pivotIndex];\r\n  var i = left,\r\n    j = right;\r\n\r\n  animations.push(\r\n    Animation(arr.slice(), [\r\n      Color('hold', [pivotIndex]),\r\n      Color('compare', [i, j]),\r\n    ])\r\n  );\r\n\r\n  while (i <= j) {\r\n    //increase i while that element is less than pivot\r\n    while (arr[i] < pivot) {\r\n      i++;\r\n      animations.push(\r\n        Animation(arr.slice(), [\r\n          Color('hold', [pivotIndex]),\r\n          Color('compare', [i, j]),\r\n        ])\r\n      );\r\n    }\r\n\r\n    //decrease j while that element is greater than pivot\r\n    while (arr[j] > pivot) {\r\n      j--;\r\n      animations.push(\r\n        Animation(arr.slice(), [\r\n          Color('hold', [pivotIndex]),\r\n          Color('compare', [i, j]),\r\n        ])\r\n      );\r\n    }\r\n\r\n    //swaps elements\r\n    if (i <= j) {\r\n      swap(arr, i, j);\r\n      animations.push(\r\n        Animation(arr.slice(), [\r\n          Color('hold', [pivotIndex]),\r\n          Color('swap', [i, j]),\r\n        ])\r\n      );\r\n      i++;\r\n      j--;\r\n      animations.push(\r\n        Animation(arr.slice(), [\r\n          Color('hold', [pivotIndex]),\r\n          Color('compare', [i, j]),\r\n        ])\r\n      );\r\n    }\r\n  }\r\n  return i;\r\n}\r\n","import { Animation } from '../Animation';\r\nimport { Color } from '../Color';\r\n\r\nexport function mergeSort(arr) {\r\n  let animations = [];\r\n\r\n  mergeSortRec(arr, 0, arr.length - 1, animations);\r\n\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortRec(arr, left, right, animations) {\r\n  if (left >= right) {\r\n    return;\r\n  }\r\n  var mid = left + parseInt((right - left) / 2);\r\n  mergeSortRec(arr, left, mid, animations);\r\n  mergeSortRec(arr, mid + 1, right, animations);\r\n  merge(arr, left, mid, right, animations);\r\n}\r\n\r\nfunction merge(arr, left, mid, right, animations) {\r\n  var n1 = mid - left + 1;\r\n  var n2 = right - mid;\r\n\r\n  // Create temp arrays\r\n  var L = new Array(n1);\r\n  var R = new Array(n2);\r\n\r\n  // Copy data to temp arrays L[] and R[]\r\n  for (var i = 0; i < n1; i++) L[i] = arr[left + i];\r\n  for (var j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];\r\n\r\n  // Merge the temp arrays back into arr[l..r]\r\n\r\n  // Initial index of first subarray\r\n  var ii = 0;\r\n\r\n  // Initial index of second subarray\r\n  var jj = 0;\r\n\r\n  // Initial index of merged subarray\r\n  var k = left;\r\n\r\n  while (ii < n1 && jj < n2) {\r\n    if (L[ii] <= R[jj]) {\r\n      arr[k] = L[ii];\r\n      animations.push(\r\n        Animation(arr.slice(), [\r\n          Color('compare', range(left, right)),\r\n          Color('swap', [k]),\r\n        ])\r\n      );\r\n      ii++;\r\n    } else {\r\n      arr[k] = R[jj];\r\n      animations.push(\r\n        Animation(arr.slice(), [\r\n          Color('compare', range(left, right)),\r\n          Color('swap', [k]),\r\n        ])\r\n      );\r\n      jj++;\r\n    }\r\n    k++;\r\n  }\r\n\r\n  // Copy the remaining elements of\r\n  // L[], if there are any\r\n  while (ii < n1) {\r\n    arr[k] = L[ii];\r\n    animations.push(\r\n      Animation(arr.slice(), [\r\n        Color('compare', range(left, right)),\r\n        Color('swap', [k]),\r\n      ])\r\n    );\r\n    ii++;\r\n    k++;\r\n  }\r\n\r\n  // Copy the remaining elements of\r\n  // R[], if there are any\r\n  while (jj < n2) {\r\n    arr[k] = R[jj];\r\n    animations.push(\r\n      Animation(arr.slice(), [\r\n        Color('compare', range(left, right)),\r\n        Color('swap', [k]),\r\n      ])\r\n    );\r\n    jj++;\r\n    k++;\r\n  }\r\n}\r\n\r\nfunction range(start, end) {\r\n  return Array(end - start + 1)\r\n    .fill()\r\n    .map((_, idx) => start + idx);\r\n}\r\n","import { Animation } from '../Animation';\r\nimport { Color } from '../Color';\r\n\r\nexport function selectionSort(arr) {\r\n  let animations = [];\r\n\r\n  var i, j, min_idx;\r\n\r\n  // One by one move boundary of unsorted subarray\r\n  for (i = 0; i < arr.length - 1; i++) {\r\n    // Find the minimum element in unsorted array\r\n    min_idx = i;\r\n    for (j = i + 1; j < arr.length; j++) {\r\n      if (arr[j] < arr[min_idx]) min_idx = j;\r\n\r\n      animations.push(Animation(arr.slice(), [Color('compare', [i, j])]));\r\n    }\r\n\r\n    // Swap the found minimum element with the first element\r\n    swap(arr, min_idx, i, animations);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nfunction swap(arr, i, j, animations) {\r\n  var temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n  animations.push(Animation(arr.slice(), [Color('swap', [i, j])]));\r\n}\r\n","import React from 'react';\r\nimport './sortVisualizer.css';\r\nimport { bubbleSort } from './algorithms/bubbleSort';\r\nimport { insertionSort } from './algorithms/insertionSort';\r\nimport { quickSort } from './algorithms/quickSort';\r\nimport { mergeSort } from './algorithms/mergeSort';\r\nimport { selectionSort } from './algorithms/selectionSort';\r\n\r\nconst ARRAY_RANGE = [5, 500];\r\n\r\nconst BAR_SCALE = 1.5;\r\n\r\nconst REG_COLOR = '#36279c';\r\n\r\nconst COMPARE_COLOR = '#9c222c';\r\n\r\nconst SWAP_COLOR = '#269950';\r\n\r\nconst HOLD_COLOR = '#b86827';\r\n\r\nconst ARRAY_SIZE_DEFAULT = 15;\r\n\r\nconst ANIMATION_SPEED_DEFAULT = 50;\r\n\r\nconst METHODS = [\r\n  { value: 'bubble', label: 'Bubble Sort' },\r\n  { value: 'insertion', label: 'Insertion Sort' },\r\n  { value: 'quick', label: 'Quick Sort' },\r\n  { value: 'merge', label: 'Merge Sort' },\r\n  { value: 'selection', label: 'Selection Sort' },\r\n];\r\n\r\nfunction SortVisualizer() {\r\n  const [animationSpeed, setAnimationSpeed] = React.useState(\r\n    ANIMATION_SPEED_DEFAULT\r\n  );\r\n\r\n  const [arraySize, setArraySize] = React.useState(ARRAY_SIZE_DEFAULT);\r\n\r\n  const [numberArray, setNumberArray] = React.useState([0]);\r\n\r\n  const [method, setMethod] = React.useState('bubble');\r\n\r\n  var timeouts = [];\r\n\r\n  React.useEffect(resetArray, [arraySize]);\r\n\r\n  function resetArray() {\r\n    let array = [];\r\n    for (let i = 0; i < arraySize; i++) {\r\n      array.push(createRandomInt());\r\n    }\r\n    updateArray(array);\r\n  }\r\n\r\n  function updateArray(array) {\r\n    console.log('array updated: ');\r\n    setNumberArray(array);\r\n  }\r\n\r\n  function changeArraySize(value) {\r\n    console.log('array size changed to: ' + value);\r\n    setArraySize(value);\r\n  }\r\n\r\n  function changeAnimiationSpeed(value) {\r\n    console.log('animation speed changed ' + value);\r\n    setAnimationSpeed(value);\r\n  }\r\n\r\n  const createRandomInt = () =>\r\n    Math.floor(Math.random() * ARRAY_RANGE[1]) + ARRAY_RANGE[0];\r\n\r\n  const getBarHeight = (value) => value * BAR_SCALE;\r\n\r\n  const getBarWidth = () => 100 / arraySize;\r\n\r\n  function handleSortClick() {\r\n    const method = document.getElementById('method').value;\r\n    let array = numberArray.slice();\r\n\r\n    console.log(`performing ${method} sort`);\r\n\r\n    switch (method) {\r\n      case 'insertion':\r\n        animate(insertionSort(array));\r\n        break;\r\n      case 'bubble':\r\n        animate(bubbleSort(array));\r\n        break;\r\n      case 'quick':\r\n        animate(quickSort(array));\r\n        break;\r\n      case 'merge':\r\n        animate(mergeSort(array));\r\n        break;\r\n      case 'selection':\r\n        animate(selectionSort(array));\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  function animate(animations) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i !== animations.length - 1) {\r\n        animationStep(animations[i], i, bars, false);\r\n      } else {\r\n        animationStep(animations[i], i, bars, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  function animationStep(animation, i, bars, complete) {\r\n    timeouts.push(\r\n      setTimeout(function an() {\r\n        reColorBars(bars);\r\n        updateArray(animation.array);\r\n\r\n        if ('colors' in animation) {\r\n          colorBars(bars, animation);\r\n        }\r\n        if (complete) reColorBars(bars, true);\r\n      }, i * animationSpeed)\r\n    );\r\n  }\r\n\r\n  function colorBars(bars, animation) {\r\n    for (let color of animation.colors) {\r\n      for (let index of color.indices) {\r\n        try {\r\n          bars[index].style.backgroundColor = getColor(color.type);\r\n        } catch {}\r\n      }\r\n    }\r\n  }\r\n\r\n  function getColor(type) {\r\n    switch (type) {\r\n      case 'compare':\r\n        return COMPARE_COLOR;\r\n      case 'swap':\r\n        return SWAP_COLOR;\r\n      case 'hold':\r\n        return HOLD_COLOR;\r\n      default:\r\n        return REG_COLOR;\r\n    }\r\n  }\r\n\r\n  function reColorBars(bars) {\r\n    for (let bar of bars) {\r\n      bar.style.backgroundColor = REG_COLOR;\r\n    }\r\n  }\r\n\r\n  const createArrayBar = (value, index) => {\r\n    return (\r\n      <div\r\n        className=\"array-bar\"\r\n        style={{\r\n          height: getBarHeight(value),\r\n          width: `calc(${getBarWidth()}% - 2px)`,\r\n          backgroundColor: REG_COLOR,\r\n        }}\r\n        key={index}\r\n      ></div>\r\n    );\r\n  };\r\n\r\n  function SortOptions() {\r\n    return (\r\n      <select\r\n        id=\"method\"\r\n        name=\"selectedMethod\"\r\n        className=\"control-item\"\r\n        onChange={(e) => {\r\n          setMethod(e.target.value);\r\n        }}\r\n      >\r\n        {METHODS.map((m) =>\r\n          m.value === method ? (\r\n            <option className=\"selection\" value={m.value} selected>\r\n              {m.label}\r\n            </option>\r\n          ) : (\r\n            <option className=\"selection\" value={m.value}>\r\n              {m.label}\r\n            </option>\r\n          )\r\n        )}\r\n      </select>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"visualizer-container\">\r\n      <div className=\"bar-container\">\r\n        {numberArray.map((value, index) => createArrayBar(value, index))}\r\n      </div>\r\n      <div className=\"control-panel\">\r\n        <div className=\"control-wrap\">\r\n          <SortOptions />\r\n          <button\r\n            className=\"control-color control-button control-item\"\r\n            onClick={() => handleSortClick()}\r\n          >\r\n            Sort\r\n          </button>\r\n          <button\r\n            className=\"control-color control-button control-item\"\r\n            onClick={() => resetArray()}\r\n          >\r\n            New Array\r\n          </button>\r\n          <div className=\"slider-container control-item\">\r\n            <label className=\"slider-label\">Array Size </label>\r\n            <input\r\n              onClick={(e) => changeArraySize(e.target.value)}\r\n              type=\"range\"\r\n              id=\"array-size\"\r\n              name=\"array size\"\r\n              min=\"10\"\r\n              max=\"100\"\r\n              defaultValue={ARRAY_SIZE_DEFAULT}\r\n            ></input>\r\n          </div>\r\n          <div className=\"slider-container control-item\">\r\n            <label className=\"slider-label\"> Animation Time </label>\r\n            <input\r\n              onClick={(e) => changeAnimiationSpeed(e.target.value)}\r\n              className=\"control-color\"\r\n              type=\"range\"\r\n              id=\"speed\"\r\n              name=\"speed\"\r\n              min=\"1\"\r\n              max=\"600\"\r\n              defaultValue={ANIMATION_SPEED_DEFAULT}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortVisualizer;\r\n","import { Animation } from '../Animation';\r\nimport { Color } from '../Color';\r\n\r\nexport function insertionSort(array) {\r\n  let animations = [];\r\n\r\n  let i, key, j;\r\n\r\n  let len = array.length;\r\n\r\n  //loop through each element\r\n  for (i = 1; i < len; i++) {\r\n    key = array[i];\r\n    j = i - 1;\r\n\r\n    animations.push(Animation(array.slice(), [Color('hold', [i, j])]));\r\n\r\n    //check previous elements and check where element belongs\r\n    while (j >= 0 && array[j] > key) {\r\n      array[j + 1] = array[j];\r\n\r\n      animations.push(\r\n        Animation(array.slice(), [Color('hold', [i]), Color('swap', [j + 1])])\r\n      );\r\n\r\n      j = j - 1;\r\n    }\r\n\r\n    array[j + 1] = key;\r\n\r\n    animations.push(\r\n      Animation(array.slice(), [Color('hold', [i]), Color('swap', [j + 1])])\r\n    );\r\n    animations.push(Animation(array.slice(), [Color('hold', [i, j + 1])]));\r\n  }\r\n\r\n  return animations;\r\n}\r\n","import { Animation } from '../Animation';\r\nimport { Color } from '../Color';\r\n\r\nexport function bubbleSort(array) {\r\n  let animations = [];\r\n\r\n  let swapped = false;\r\n\r\n  let len = array.length;\r\n\r\n  do {\r\n    swapped = false;\r\n\r\n    //loop through array\r\n    for (let i = 0; i < len; i++) {\r\n      animations.push(Animation(array.slice(), [Color('compare', [i, i + 1])]));\r\n\r\n      //swap if left is larger\r\n      if (array[i] > array[i + 1]) {\r\n        animations.push(Animation(array.slice(), [Color('swap', [i, i + 1])]));\r\n\r\n        let tmp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = tmp;\r\n        swapped = true;\r\n\r\n        animations.push(Animation(array.slice(), []));\r\n      }\r\n    }\r\n  } while (swapped);\r\n\r\n  return animations;\r\n}\r\n","import './App.css';\nimport SortVisualizer from './components/sortVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
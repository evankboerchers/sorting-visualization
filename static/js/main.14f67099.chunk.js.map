{"version":3,"sources":["components/sortVisualizer.js","components/algorithms/insertionSort.js","components/algorithms/bubbleSort.js","App.js","index.js"],"names":["ARRAY_RANGE","REG_COLOR","SWAP_COLOR","COMP_COLOR","SortVisualizer","React","useState","animationSpeed","setAnimationSpeed","arraySize","setArraySize","numberArray","setNumberArray","resetArray","array","i","push","createRandomInt","updateArray","console","log","useEffect","Math","floor","random","getBarHeight","value","animate","animations","bars","document","getElementsByClassName","length","animationStep","animation","complete","setTimeout","reColorBars","colors","color","type","indices","index","style","backgroundColor","colorBars","className","map","height","width","createArrayBar","id","onClick","method","getElementById","slice","key","j","len","insertionSort","swapped","tmp","bubbleSort","handleSortClick","e","target","name","min","max","defaultValue","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.14f67099.chunk.js","sourcesContent":["import React from 'react';\r\nimport './sortVisualizer.css';\r\nimport { bubbleSort } from './algorithms/bubbleSort';\r\nimport { insertionSort } from './algorithms/insertionSort';\r\n\r\nconst ARRAY_RANGE = [5, 500];\r\n\r\nconst BAR_SCALE = 1.5;\r\n\r\nconst REG_COLOR = 'Purple';\r\n\r\nconst COMPARE_COLOR = 'red';\r\n\r\nconst SWAP_COLOR = 'green';\r\n\r\nconst COMP_COLOR = 'grey';\r\n\r\nconst ARRAY_SIZE_DEFAULT = 15;\r\n\r\nconst ANIMATION_SPEED_DEFAULT = 50;\r\n\r\nfunction SortVisualizer() {\r\n  const [animationSpeed, setAnimationSpeed] = React.useState(\r\n    ANIMATION_SPEED_DEFAULT\r\n  );\r\n\r\n  const [arraySize, setArraySize] = React.useState(ARRAY_SIZE_DEFAULT);\r\n\r\n  const [numberArray, setNumberArray] = React.useState([0]);\r\n\r\n  const [sorted, setSorted] = React.useState(false);\r\n\r\n  React.useEffect(resetArray, []);\r\n\r\n  React.useEffect(resetArray, [arraySize]);\r\n\r\n  function resetArray() {\r\n    let array = [];\r\n    for (let i = 0; i < arraySize; i++) {\r\n      array.push(createRandomInt());\r\n    }\r\n    updateArray(array);\r\n  }\r\n\r\n  function updateArray(array) {\r\n    console.log('array updated: ');\r\n    setNumberArray(array);\r\n  }\r\n\r\n  function changeArraySize(value) {\r\n    console.log('array size changed to: ' + value);\r\n    setArraySize(value);\r\n  }\r\n\r\n  function changeAnimiationSpeed(value) {\r\n    console.log('animation speed changed ' + value);\r\n    setAnimationSpeed(value);\r\n  }\r\n\r\n  const createRandomInt = () =>\r\n    Math.floor(Math.random() * ARRAY_RANGE[1]) + ARRAY_RANGE[0];\r\n\r\n  const getBarHeight = (value) => value * BAR_SCALE;\r\n\r\n  const getBarWidth = () => 100 / arraySize;\r\n\r\n  function handleSortClick() {\r\n    const method = document.getElementById('method').value;\r\n    let array = numberArray.slice();\r\n\r\n    console.log(`performing ${method} sort`);\r\n\r\n    switch (method) {\r\n      case 'insertion':\r\n        animate(insertionSort(array));\r\n        break;\r\n      case 'bubble':\r\n        animate(bubbleSort(array));\r\n        break;\r\n    }\r\n  }\r\n\r\n  function animate(animations) {\r\n    const bars = document.getElementsByClassName('array-bar');\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i != animations.length - 1) {\r\n        animationStep(animations[i], i, bars, false);\r\n      } else {\r\n        animationStep(animations[i], i, bars, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  function animationStep(animation, i, bars, complete) {\r\n    setTimeout(function an() {\r\n      reColorBars(bars);\r\n      updateArray(animation.array);\r\n\r\n      if ('colors' in animation) {\r\n        colorBars(bars, animation);\r\n      }\r\n      if (complete) reColorBars(bars, true);\r\n    }, i * animationSpeed);\r\n  }\r\n\r\n  function colorBars(bars, animation) {\r\n    for (let color of animation.colors) {\r\n      switch (color.type) {\r\n        case 'compare':\r\n          for (let index of color.indices) {\r\n            try {\r\n              bars[index].style.backgroundColor = COMPARE_COLOR;\r\n            } catch {\r\n              console.log('error coloring bars in step');\r\n            }\r\n          }\r\n          break;\r\n        case 'swap':\r\n          for (let index of color.indices) {\r\n            try {\r\n              bars[index].style.backgroundColor = SWAP_COLOR;\r\n            } catch {\r\n              console.log('error coloring bars in step');\r\n            }\r\n          }\r\n          break;\r\n        case 'complete':\r\n          for (let index of color.indices) {\r\n            try {\r\n              bars[index].style.backgroundColor = COMP_COLOR;\r\n            } catch {\r\n              console.log('error coloring bars in step');\r\n            }\r\n          }\r\n          break;\r\n      }\r\n\r\n      if (color.type == 'swap') {\r\n        for (let index of color.indices) {\r\n          try {\r\n            bars[index].style.backgroundColor = SWAP_COLOR;\r\n          } catch {\r\n            console.log('error coloring bars in step');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function reColorBars(bars) {\r\n    for (let bar of bars) {\r\n      bar.style.backgroundColor = REG_COLOR;\r\n    }\r\n  }\r\n\r\n  const createArrayBar = (value, index) => {\r\n    return (\r\n      <div\r\n        className=\"array-bar\"\r\n        style={{\r\n          height: getBarHeight(value),\r\n          width: `calc(${getBarWidth()}% - 2px)`,\r\n          backgroundColor: REG_COLOR,\r\n        }}\r\n        key={index}\r\n      ></div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"visualizer-container\">\r\n      <div className=\"wip\"> WIP: More algorithms to come! </div>\r\n      <div className=\"bar-container\">\r\n        {numberArray.map((value, index) => createArrayBar(value, index))}\r\n      </div>\r\n      <div className=\"control-panel\">\r\n        <div className=\"control-wrap\">\r\n          <select id=\"method\" className=\"control-item\">\r\n            <option className=\"selection\" value=\"bubble\">\r\n              Bubble Sort\r\n            </option>\r\n            <option className=\"selection\" value=\"insertion\">\r\n              Insertion Sort\r\n            </option>\r\n          </select>\r\n          <button\r\n            className=\"control-color control-button control-item\"\r\n            onClick={() => handleSortClick()}\r\n          >\r\n            Sort\r\n          </button>\r\n          <button\r\n            className=\"control-color control-button control-item\"\r\n            onClick={() => resetArray()}\r\n          >\r\n            New Array\r\n          </button>\r\n          <div className=\"slider-container control-item\">\r\n            <label className=\"slider-label\">Array Size </label>\r\n            <input\r\n              onClick={(e) => changeArraySize(e.target.value)}\r\n              type=\"range\"\r\n              id=\"array-size\"\r\n              name=\"array size\"\r\n              min=\"10\"\r\n              max=\"100\"\r\n              defaultValue={ARRAY_SIZE_DEFAULT}\r\n            ></input>\r\n          </div>\r\n          <div className=\"slider-container control-item\">\r\n            <label className=\"slider-label\"> Animation Time </label>\r\n            <input\r\n              onClick={(e) => changeAnimiationSpeed(e.target.value)}\r\n              className=\"control-color\"\r\n              type=\"range\"\r\n              id=\"speed\"\r\n              name=\"speed\"\r\n              min=\"1\"\r\n              max=\"600\"\r\n              defaultValue={ANIMATION_SPEED_DEFAULT}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortVisualizer;\r\n","export function insertionSort(array) {\r\n  let animations = [];\r\n\r\n  let i, key, j;\r\n\r\n  let len = array.length;\r\n\r\n  for (i = 1; i < len; i++) {\r\n    key = array[i];\r\n    j = i - 1;\r\n\r\n    animations.push({\r\n      array: array.slice(),\r\n      colors: [{ type: 'compare', indices: [i, j] }],\r\n    });\r\n\r\n    while (j >= 0 && array[j] > key) {\r\n      array[j + 1] = array[j];\r\n\r\n      animations.push({\r\n        array: array.slice(),\r\n        colors: [\r\n          { type: 'complete', indices: [i] },\r\n          { type: 'swap', indices: [j + 1] },\r\n        ],\r\n      });\r\n\r\n      j = j - 1;\r\n    }\r\n\r\n    array[j + 1] = key;\r\n\r\n    animations.push({\r\n      array: array.slice(),\r\n      colors: [\r\n        { type: 'complete', indices: [i] },\r\n        { type: 'swap', indices: [j + 1] },\r\n      ],\r\n    });\r\n\r\n    animations.push({\r\n      array: array.slice(),\r\n      colors: [{ type: 'complete', indices: [i, j + 1] }],\r\n    });\r\n  }\r\n\r\n  return animations;\r\n}\r\n","export function bubbleSort(array) {\r\n  let animations = [];\r\n\r\n  let swapped = false;\r\n\r\n  let len = array.length;\r\n\r\n  do {\r\n    swapped = false;\r\n    for (let i = 0; i < len; i++) {\r\n      animations.push({\r\n        array: array.slice(),\r\n        colors: [{ type: 'compare', indices: [i, i + 1] }],\r\n      });\r\n\r\n      if (array[i] > array[i + 1]) {\r\n        animations.push({\r\n          array: array.slice(),\r\n          colors: [{ type: 'swap', indices: [i, i + 1] }],\r\n        });\r\n\r\n        let tmp = array[i];\r\n        array[i] = array[i + 1];\r\n        array[i + 1] = tmp;\r\n        swapped = true;\r\n\r\n        animations.push({ array: array.slice() });\r\n      }\r\n    }\r\n  } while (swapped);\r\n\r\n  return animations;\r\n}\r\n","import './App.css';\nimport SortVisualizer from './components/sortVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortVisualizer></SortVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}